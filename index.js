require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const PortfolioParser = require('./portfolioParser');
const ImageGenerator = require('./imageGenerator');
const UserLogger = require('./userLogger');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const parser = new PortfolioParser();
const imageGenerator = new ImageGenerator();
const userLogger = new UserLogger();

// –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
const processingQueue = new Map(); // chatId -> timestamp
const userCooldowns = new Map(); // chatId -> timestamp
const MAX_CONCURRENT_REQUESTS = 3; // –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const COOLDOWN_TIME = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const REQUEST_TIMEOUT = 120000; // 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
function canProcessRequest(chatId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastRequest = userCooldowns.get(chatId);
    if (lastRequest && Date.now() - lastRequest < COOLDOWN_TIME) {
        return { canProcess: false, reason: 'cooldown', timeLeft: Math.ceil((COOLDOWN_TIME - (Date.now() - lastRequest)) / 1000) };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const activeRequests = processingQueue.size;
    if (activeRequests >= MAX_CONCURRENT_REQUESTS) {
        return { canProcess: false, reason: 'queue_full', queuePosition: activeRequests + 1 };
    }
    
    return { canProcess: true };
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
function addToQueue(chatId) {
    processingQueue.set(chatId, Date.now());
    userCooldowns.set(chatId, Date.now());
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
function removeFromQueue(chatId) {
    processingQueue.delete(chatId);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
    userLogger.logStart(user, chatId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let greeting = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å";
    if (user.first_name) {
        greeting = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!`;
    } else if (user.username) {
        greeting = `–ü—Ä–∏–≤–µ—Ç, @${user.username}!`;
    }
    
    const welcomeMessage = `
üéì ${greeting}

–≠—Ç–æ—Ç –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤–æ –í–®–≠.

üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–µ —Å—Ç–∞—Ä–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –í–®–≠:

–ü—Ä–∏–º–µ—Ä: https://portfolio.hse.ru/Student/17647

–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫!
    `;
    
    // –ü—É—Ç—å –∫ MP4 —Ñ–∞–π–ª—É
    const videoPath = path.join(__dirname, 'assets', 'images', 'welcome.mp4');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (fs.existsSync(videoPath)) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP4 –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.sendVideo(chatId, fs.createReadStream(videoPath), {
                caption: welcomeMessage,
                filename: 'welcome.mp4',
                contentType: 'video/mp4'
            });
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log('MP4 —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            bot.sendMessage(chatId, welcomeMessage);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ MP4:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, welcomeMessage);
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId) {
    const adminIds = [process.env.ADMIN_ID]; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    return adminIds.includes(userId.toString());
}

// –ö–æ–º–∞–Ω–¥–∞ /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    
    if (!isAdmin(user.id)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        return;
    }
    
    try {
        const stats = userLogger.formatStats();
        await bot.sendMessage(chatId, stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /broadcast (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.onText(/\/broadcast (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const message = match[1];
    
    if (!isAdmin(user.id)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = userLogger.getUsersForBroadcast();
        
        if (users.length === 0) {
            await bot.sendMessage(chatId, 'üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
            return;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        const confirmMsg = await bot.sendMessage(chatId, 
            `üì¢ –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"${message}"\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã.`
        );
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const confirmHandler = async (confirmMsg) => {
            if (confirmMsg.chat.id !== chatId || confirmMsg.from.id !== user.id) return;
            
            bot.removeListener('message', confirmHandler);
            
            if (confirmMsg.text?.toUpperCase() === '–î–ê') {
                await sendBroadcast(chatId, message, users, 'manual');
            } else {
                await bot.sendMessage(chatId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
            }
        };
        
        bot.on('message', confirmHandler);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            bot.removeListener('message', confirmHandler);
        }, 30000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /broadcast_active (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) - —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
bot.onText(/\/broadcast_active (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const message = match[1];
    
    if (!isAdmin(user.id)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const users = userLogger.getActiveUsers(7);
        
        if (users.length === 0) {
            await bot.sendMessage(chatId, 'üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
            return;
        }
        
        await bot.sendMessage(chatId, 
            `üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ ${users.length} –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)...`
        );
        
        await sendBroadcast(chatId, message, users, 'active_users');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBroadcast(adminChatId, message, users, broadcastType) {
    let sentCount = 0;
    let failedCount = 0;
    
    const progressMsg = await bot.sendMessage(adminChatId, 
        `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: 0/${users.length} (0%)`
    );
    
    for (let i = 0; i < users.length; i++) {
        const user = users[i];
        
        try {
            await bot.sendMessage(user.chatId, message);
            sentCount++;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId}:`, error.message);
            failedCount++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
        if ((i + 1) % 10 === 0 || i === users.length - 1) {
            const progress = Math.round(((i + 1) / users.length) * 100);
            try {
                await bot.editMessageText(
                    `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: ${i + 1}/${users.length} (${progress}%)\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${sentCount}\n‚ùå –û—à–∏–±–æ–∫: ${failedCount}`,
                    {
                        chat_id: adminChatId,
                        message_id: progressMsg.message_id
                    }
                );
            } catch (editError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    userLogger.logBroadcast(broadcastType, sentCount, users.length);
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(adminChatId, 
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
        `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}\n` +
        `‚ùå –û—à–∏–±–æ–∫: ${failedCount}\n` +
        `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((sentCount / users.length) * 100).toFixed(1)}%`
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && text.startsWith('/')) {
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –í–®–≠
    const portfolioUrlRegex = /https?:\/\/portfolio\.hse\.ru\/Student\/\d+/i;
    
    if (!portfolioUrlRegex.test(text)) {
        bot.sendMessage(chatId, `
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
https://portfolio.hse.ru/Student/XXXXX

–ì–¥–µ XXXXX - —ç—Ç–æ –≤–∞—à ID —Å—Ç—É–¥–µ–Ω—Ç–∞.
        `);
        return;
    }
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –û–ß–ï–†–ï–î–¨ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
    const queueCheck = canProcessRequest(chatId);
    if (!queueCheck.canProcess) {
        if (queueCheck.reason === 'cooldown') {
            await bot.sendMessage(chatId, `
‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${queueCheck.timeLeft} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.

–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
            `);
            return;
        } else if (queueCheck.reason === 'queue_full') {
            await bot.sendMessage(chatId, `
üö¶ –°–µ–π—á–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! 

–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${queueCheck.queuePosition}. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.
            `);
            return;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    addToQueue(chatId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const processingMsg = await bot.sendMessage(chatId, `
‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...

–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!
    `);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    const timeoutId = setTimeout(() => {
        removeFromQueue(chatId);
        bot.sendMessage(chatId, `
‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ!

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.
        `);
    }, REQUEST_TIMEOUT);
    
    try {
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        userLogger.logPortfolioRequest(msg.from, text);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        console.log(`–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${text}`);
        const studentData = await parser.parseStudentData(text);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            await bot.editMessageText(`
‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!

–°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...
            `, {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        } catch (editError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', editError.message);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let images = [];
        try {
            images = await imageGenerator.generateStudentStats(studentData);
        } catch (imageError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', imageError);
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            userLogger.logFailedRequest(msg.from, 'image_generation_error');
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
            
            // –û—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (images && images.length > 0) {
                for (const imagePath of images) {
                    try {
                        if (fs.existsSync(imagePath)) {
                            fs.unlinkSync(imagePath);
                            console.log(`–£–¥–∞–ª–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: ${path.basename(imagePath)}`);
                        }
                    } catch (deleteError) {
                        console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${imagePath}:`, deleteError.message);
                    }
                }
            }
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try {
            await bot.deleteMessage(chatId, processingMsg.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError.message);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π (media group)
        if (images.length > 0) {
            const mediaGroup = images.map((imagePath, index) => ({
                type: 'photo',
                media: fs.createReadStream(imagePath),
                caption: index === 0 ? 'üéì –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HSE Wrapped' : undefined
            }));
            
            try {
                await bot.sendMediaGroup(chatId, mediaGroup);
                // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                userLogger.logSuccessfulRequest(msg.from, images.length, studentData);
            } catch (mediaError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ media group:', mediaError);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ fallback
                let sentImages = 0;
                for (const imagePath of images) {
                    try {
                        await bot.sendPhoto(chatId, fs.createReadStream(imagePath), {
                            filename: path.basename(imagePath),
                            contentType: 'image/png'
                        });
                        sentImages++;
                    } catch (photoError) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', photoError);
                    }
                }
                // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (—Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—É—é)
                if (sentImages > 0) {
                    userLogger.logSuccessfulRequest(msg.from, sentImages, studentData);
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            for (const imagePath of images) {
                try {
                    if (fs.existsSync(imagePath)) {
                        fs.unlinkSync(imagePath);
                        console.log(`–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${path.basename(imagePath)}`);
                    }
                } catch (deleteError) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${imagePath}:`, deleteError.message);
                }
            }
        }
        
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–±—Ä–∞–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
        userLogger.logFailedRequest(msg.from, 'parsing_error');
        
        try {
            await bot.editMessageText(`
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!
            `, {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        } catch (editError) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.sendMessage(chatId, `
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!
            `);
        }
    } finally {
        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
        clearTimeout(timeoutId);
        removeFromQueue(chatId);
    }
});

// –§—É–Ω–∫—Ü–∏—è formatStudentStats —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...'); 