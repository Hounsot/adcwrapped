const fs = require('fs');
const path = require('path');

class UserLogger {
  constructor() {
    this.logFile = path.join(__dirname, 'data', 'users.json');
    this.ensureDataDirectory();
    this.ensureLogFile();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
   */
  ensureDataDirectory() {
    const dataDir = path.join(__dirname, 'data');
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true });
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
   */
  ensureLogFile() {
    if (!fs.existsSync(this.logFile)) {
      const initialData = {
        users: {},
        totalUsers: 0,
        totalRequests: 0,
        createdAt: new Date().toISOString()
      };
      fs.writeFileSync(this.logFile, JSON.stringify(initialData, null, 2));
    }
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
   * @returns {Object} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  readUserData() {
    try {
      const data = fs.readFileSync(this.logFile, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', error);
      return {
        users: {},
        totalUsers: 0,
        totalRequests: 0,
        createdAt: new Date().toISOString()
      };
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
   */
  writeUserData(data) {
    try {
      fs.writeFileSync(this.logFile, JSON.stringify(data, null, 2));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @param {number} chatId - ID —á–∞—Ç–∞
   */
  logStart(user, chatId) {
    const data = this.readUserData();
    const userId = user.id.toString();
    const now = new Date().toISOString();

    if (!data.users[userId]) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      data.users[userId] = {
        id: user.id,
        username: user.username || null,
        firstName: user.first_name || null,
        lastName: user.last_name || null,
        chatId: chatId,
        firstSeen: now,
        lastSeen: now,
        startCount: 1,
        portfolioRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        totalImages: 0
      };
      data.totalUsers++;
    } else {
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      data.users[userId].lastSeen = now;
      data.users[userId].startCount++;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
      data.users[userId].username = user.username || data.users[userId].username;
      data.users[userId].firstName = user.first_name || data.users[userId].firstName;
      data.users[userId].lastName = user.last_name || data.users[userId].lastName;
      data.users[userId].chatId = chatId;
    }

    this.writeUserData(data);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name || user.username || user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
   * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @param {string} portfolioUrl - URL –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
   */
  logPortfolioRequest(user, portfolioUrl) {
    const data = this.readUserData();
    const userId = user.id.toString();
    const now = new Date().toISOString();

    if (data.users[userId]) {
      data.users[userId].portfolioRequests++;
      data.users[userId].lastSeen = now;
      data.users[userId].lastPortfolioUrl = portfolioUrl;
      data.users[userId].lastRequestTime = now;
    }

    data.totalRequests++;
    this.writeUserData(data);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name || user.username || user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ`);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @param {number} imageCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   * @param {Object} studentData - –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  logSuccessfulRequest(user, imageCount, studentData) {
    const data = this.readUserData();
    const userId = user.id.toString();
    const now = new Date().toISOString();

    if (data.users[userId]) {
      data.users[userId].successfulRequests++;
      data.users[userId].totalImages += imageCount;
      data.users[userId].lastSeen = now;
      data.users[userId].lastSuccessTime = now;
      data.users[userId].lastStudentName = studentData.studentName;
      data.users[userId].lastStudentStats = {
        totalProjects: studentData.totalProjects,
        totalLikes: studentData.statistics.totalLikes,
        totalViews: studentData.statistics.totalViews,
        averageMark: studentData.statistics.averageMark
      };
    }

    this.writeUserData(data);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name || user.username || user.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª ${imageCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   * @param {string} errorType - –¢–∏–ø –æ—à–∏–±–∫–∏
   */
  logFailedRequest(user, errorType) {
    const data = this.readUserData();
    const userId = user.id.toString();
    const now = new Date().toISOString();

    if (data.users[userId]) {
      data.users[userId].failedRequests++;
      data.users[userId].lastSeen = now;
      data.users[userId].lastError = errorType;
      data.users[userId].lastErrorTime = now;
    }

    this.writeUserData(data);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name || user.username || user.id} –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É: ${errorType}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
   * @returns {Object} –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    const data = this.readUserData();
    const users = Object.values(data.users);
    
    const activeUsers = users.filter(user => {
      const lastSeen = new Date(user.lastSeen);
      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
      return lastSeen > weekAgo;
    }).length;

    const successfulUsers = users.filter(user => user.successfulRequests > 0).length;
    const totalImages = users.reduce((sum, user) => sum + user.totalImages, 0);
    const totalSuccessful = users.reduce((sum, user) => sum + user.successfulRequests, 0);
    const totalFailed = users.reduce((sum, user) => sum + user.failedRequests, 0);

    return {
      totalUsers: data.totalUsers,
      activeUsers,
      successfulUsers,
      totalRequests: data.totalRequests,
      totalSuccessful,
      totalFailed,
      totalImages,
      successRate: data.totalRequests > 0 ? ((totalSuccessful / data.totalRequests) * 100).toFixed(1) : 0,
      averageImagesPerUser: successfulUsers > 0 ? (totalImages / successfulUsers).toFixed(1) : 0
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getTopUsers(limit = 10) {
    const data = this.readUserData();
    const users = Object.values(data.users);
    
    return users
      .sort((a, b) => b.portfolioRequests - a.portfolioRequests)
      .slice(0, limit)
      .map(user => ({
        name: user.firstName || user.username || `User ${user.id}`,
        portfolioRequests: user.portfolioRequests,
        successfulRequests: user.successfulRequests,
        totalImages: user.totalImages,
        lastSeen: user.lastSeen
      }));
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  formatStats() {
    const stats = this.getStats();
    const topUsers = this.getTopUsers(5);
    
    let message = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê\n\n`;
    message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
    message += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.activeUsers}\n`;
    message += `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: ${stats.successfulUsers}\n\n`;
    
    message += `üìà –ó–ê–ü–†–û–°–´\n`;
    message += `üìã –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}\n`;
    message += `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.totalSuccessful}\n`;
    message += `‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${stats.totalFailed}\n`;
    message += `üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.successRate}%\n\n`;
    
    message += `üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø\n`;
    message += `üì∏ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${stats.totalImages}\n`;
    message += `üìä –í —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${stats.averageImagesPerUser}\n\n`;
    
    if (topUsers.length > 0) {
      message += `üèÜ –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n`;
      topUsers.forEach((user, index) => {
        message += `${index + 1}. ${user.name}: ${user.portfolioRequests} –∑–∞–ø—Ä–æ—Å–æ–≤\n`;
      });
    }
    
    return message;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å chatId
   */
  getUsersForBroadcast(filters = {}) {
    const data = this.readUserData();
    const users = Object.values(data.users);
    
    let filteredUsers = users;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–Ω–∏)
    if (filters.activeDays) {
      const cutoffDate = new Date(Date.now() - filters.activeDays * 24 * 60 * 60 * 1000);
      filteredUsers = filteredUsers.filter(user => {
        const lastSeen = new Date(user.lastSeen);
        return lastSeen > cutoffDate;
      });
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —É—Å–ø–µ—à–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
    if (filters.hasSuccessfulRequests) {
      filteredUsers = filteredUsers.filter(user => user.successfulRequests > 0);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
    if (filters.minRequests) {
      filteredUsers = filteredUsers.filter(user => user.portfolioRequests >= filters.minRequests);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    return filteredUsers.map(user => ({
      chatId: user.chatId,
      firstName: user.firstName,
      username: user.username,
      lastSeen: user.lastSeen,
      portfolioRequests: user.portfolioRequests,
      successfulRequests: user.successfulRequests
    }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getActiveUsers(days = 30) {
    return this.getUsersForBroadcast({ activeDays: days });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
   */
  getSuccessfulUsers() {
    return this.getUsersForBroadcast({ hasSuccessfulRequests: true });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {number} minRequests - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getVeryActiveUsers(minRequests = 2) {
    return this.getUsersForBroadcast({ minRequests });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {string} broadcastType - –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {number} sentCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {number} totalCount - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  logBroadcast(broadcastType, sentCount, totalCount) {
    const data = this.readUserData();
    
    if (!data.broadcasts) {
      data.broadcasts = [];
    }
    
    data.broadcasts.push({
      type: broadcastType,
      sentCount,
      totalCount,
      successRate: ((sentCount / totalCount) * 100).toFixed(1),
      timestamp: new Date().toISOString()
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–∞—Å—Å—ã–ª–æ–∫
    if (data.broadcasts.length > 50) {
      data.broadcasts = data.broadcasts.slice(-50);
    }
    
    this.writeUserData(data);
    console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ "${broadcastType}": –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}/${totalCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
  }
}

module.exports = UserLogger; 