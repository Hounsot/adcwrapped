#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è HSE Portfolio Bot
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  botName: 'hse-portfolio-bot',
  maxMemoryMB: 1024, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB
  logFile: path.join(__dirname, 'logs', 'healthcheck.log'),
  telegramToken: process.env.TELEGRAM_BOT_TOKEN,
  adminId: process.env.ADMIN_ID
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 */
function log(message, level = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${level}] ${message}`;
  
  console.log(logMessage);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
  try {
    fs.appendFileSync(CONFIG.logFile, logMessage + '\n');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª:', error.message);
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–º–∏—Å–æ–º
 */
function execPromise(command) {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject({ error, stderr });
      } else {
        resolve(stdout);
      }
    });
  });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ PM2
 */
async function getPM2Status() {
  try {
    const output = await execPromise('pm2 jlist');
    const processes = JSON.parse(output);
    const botProcess = processes.find(p => p.name === CONFIG.botName);
    
    if (!botProcess) {
      return { status: 'not_found', process: null };
    }
    
    return {
      status: botProcess.pm2_env.status,
      memory: Math.round(botProcess.pm2_env.memory / 1024 / 1024), // MB
      cpu: botProcess.pm2_env.cpu,
      uptime: botProcess.pm2_env.pm_uptime,
      restarts: botProcess.pm2_env.restart_time,
      process: botProcess
    };
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ PM2: ${error.error?.message || error}`, 'ERROR');
    return { status: 'error', process: null };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API
 */
async function checkTelegramAPI() {
  if (!CONFIG.telegramToken) {
    return { status: 'no_token', error: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
  }
  
  try {
    const { default: fetch } = await import('node-fetch');
    const response = await fetch(`https://api.telegram.org/bot${CONFIG.telegramToken}/getMe`, {
      timeout: 10000
    });
    
    if (response.ok) {
      const data = await response.json();
      return { status: 'ok', botInfo: data.result };
    } else {
      return { status: 'error', error: `HTTP ${response.status}` };
    }
  } catch (error) {
    return { status: 'error', error: error.message };
  }
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
 */
async function restartBot(reason) {
  try {
    log(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`, 'WARN');
    await execPromise(`pm2 restart ${CONFIG.botName}`);
    log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω', 'INFO');
    return true;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error.error?.message || error}`, 'ERROR');
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
async function notifyAdmin(message) {
  if (!CONFIG.telegramToken || !CONFIG.adminId) {
    return false;
  }
  
  try {
    const { default: fetch } = await import('node-fetch');
    const response = await fetch(`https://api.telegram.org/bot${CONFIG.telegramToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: CONFIG.adminId,
        text: `ü§ñ HSE Portfolio Bot\n\n${message}`,
        parse_mode: 'HTML'
      })
    });
    
    return response.ok;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`, 'ERROR');
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
 */
async function healthCheck() {
  log('–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  const logsDir = path.dirname(CONFIG.logFile);
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
  }
  
  let needsRestart = false;
  let restartReason = '';
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PM2
  const pm2Status = await getPM2Status();
  log(`–°—Ç–∞—Ç—É—Å PM2: ${pm2Status.status}`);
  
  if (pm2Status.status === 'not_found') {
    log('–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PM2', 'ERROR');
    await notifyAdmin('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PM2. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫.');
    return;
  }
  
  if (pm2Status.status === 'error') {
    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PM2', 'ERROR');
    return;
  }
  
  if (pm2Status.status === 'stopped') {
    needsRestart = true;
    restartReason = '–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
  }
  
  if (pm2Status.status === 'errored') {
    needsRestart = true;
    restartReason = '–ü—Ä–æ—Ü–µ—Å—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏';
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
  if (pm2Status.memory && pm2Status.memory > CONFIG.maxMemoryMB) {
    needsRestart = true;
    restartReason = `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${pm2Status.memory}MB > ${CONFIG.maxMemoryMB}MB`;
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
  const telegramStatus = await checkTelegramAPI();
  log(`–°—Ç–∞—Ç—É—Å Telegram API: ${telegramStatus.status}`);
  
  if (telegramStatus.status === 'error') {
    log(`–ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram API: ${telegramStatus.error}`, 'WARN');
    // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
  if (pm2Status.restarts && pm2Status.restarts > 10) {
    log(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${pm2Status.restarts}`, 'WARN');
    await notifyAdmin(`‚ö†Ô∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è ${pm2Status.restarts} —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.`);
  }
  
  // 5. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (pm2Status.status === 'online') {
    const uptimeHours = Math.round((Date.now() - pm2Status.uptime) / 1000 / 60 / 60);
    log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–∞–º—è—Ç—å ${pm2Status.memory}MB, CPU ${pm2Status.cpu}%, uptime ${uptimeHours}—á, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ${pm2Status.restarts}`);
  }
  
  // 6. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (needsRestart) {
    const restarted = await restartBot(restartReason);
    if (restarted) {
      await notifyAdmin(`üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\n\n–ü—Ä–∏—á–∏–Ω–∞: ${restartReason}`);
    } else {
      await notifyAdmin(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n–ü—Ä–∏—á–∏–Ω–∞: ${restartReason}`);
    }
  } else {
    log('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (require.main === module) {
  healthCheck().catch(error => {
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'ERROR');
    process.exit(1);
  });
} 